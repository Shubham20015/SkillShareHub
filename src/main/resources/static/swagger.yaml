openapi: 3.0.3
info:
  title: SkillShareHub API
  description: A REST API to manage skill sharing between users.
  version: v1.1
servers:
  - url: 'http://localhost:8080'
    description: Local server
tags:
  - name: Users
    description: Manage user profiles
  - name: Skills
    description: Manage skills and expertise
  - name: Skill Requests
    description: Manage skill-sharing requests
  - name: Reviews
    description: Manage reviews and ratings

paths:
  /api/users:
    get:
      tags:
        - Users
      summary: Get all users
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDto'
        required: true
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  '/api/users/{userId}':
    get:
      tags:
        - Users
      summary: Get a user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    delete:
      tags:
        - Users
      summary: Delete a user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Users
      summary: Update a user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /api/skills:
    get:
      tags:
        - Skills
      summary: Get all Skills based on keyword if present
      parameters:
        - name: keyword
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of skills
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
    post:
      tags:
        - Skills
      summary: Add a new skill
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillRequestDto'
        required: true
      responses:
        '201':
          description: Skill created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  '/api/skills/{skillId}':
    get:
      tags:
        - Skills
      summary: Get a skill by ID
      parameters:
        - name: skillId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Get Skill details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
        '404':
          description: Skill not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    delete:
      tags:
        - Skills
      summary: Delete a skill by ID
      parameters:
        - name: skillId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Skill deleted successfully
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Skill not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Skills
      summary: Update a skill by ID
      parameters:
        - name: skillId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillRequestDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
        '404':
          description: Skill not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /api/skill-request:
    post:
      tags:
        - Skill Requests
      summary: Create a new skill request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillShareCreateRequestDto'
        required: true
      responses:
        '201':
          description: Skill request created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillRequest'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  '/api/skill-request/{skillRequestId}':
    delete:
      tags:
        - Skill Requests
      summary: Delete a skill request by ID
      parameters:
        - name: skillRequestId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Skill request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Skill Requests
      summary: Update a skill request by ID
      parameters:
        - name: skillRequestId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillShareUpdateRequestDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillRequest'
        '404':
          description: Skill request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /api/reviews:
    post:
      tags:
        - Reviews
      summary: Add a review
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequestDto'
        required: true
      responses:
        '201':
          description: Review added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  '/api/reviews/{reviewId}':
    delete:
      tags:
        - Reviews
      summary: Delete a review by ID
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Review deleted successfully
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Review not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      tags:
        - Reviews
      summary: Update a review by ID
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequestDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          description: Review not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  '/api/reviews/skill/{skillId}':
    get:
      tags:
        - Reviews
      summary: Get reviews by SkillId
      parameters:
        - name: skillId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Get list of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '404':
          description: Skill not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'

components:
  schemas:
    UserRequestDto:
      required:
        - email
        - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        bio:
          type: string
    Skill:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          maxLength: 30
          minLength: 2
          type: string
        description:
          maxLength: 100
          type: string
        expertiseLevel:
          type: string
          enum:
            - BEGINNER
            - INTERMEDIATE
            - ADVANCED
            - EXPERT
        user:
          $ref: '#/components/schemas/User'
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    SkillRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        requester:
          $ref: '#/components/schemas/User'
        provider:
          $ref: '#/components/schemas/User'
        skill:
          $ref: '#/components/schemas/Skill'
        status:
          type: string
          enum:
            - PENDING
            - ACCEPTED
            - REJECTED
            - COMPLETED
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    User:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          maxLength: 40
          minLength: 3
          type: string
        email:
          type: string
        bio:
          maxLength: 300
          type: string
        skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
        requestedSkillRequests:
          type: array
          items:
            $ref: '#/components/schemas/SkillRequest'
        providedSkillRequests:
          type: array
          items:
            $ref: '#/components/schemas/SkillRequest'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    SkillRequestDto:
      required:
        - userId
        - name
      type: object
      properties:
        userId:
          type: string
          format: uuid
        name:
          maxLength: 30
          minLength: 2
          type: string
        description:
          maxLength: 100
          type: string
        expertiseLevel:
          type: string
          enum:
            - BEGINNER
            - INTERMEDIATE
            - ADVANCED
            - EXPERT
    SkillShareCreateRequestDto:
      required:
        - providerId
        - requesterId
        - skillId
      type: object
      properties:
        requesterId:
          type: string
        providerId:
          type: string
        skillId:
          type: integer
          format: int64
    ReviewRequestDto:
      required:
        - reviewerId
        - skillId
      type: object
      properties:
        reviewerId:
          type: string
          format: uuid
        skillId:
          type: number
        rating:
          maximum: 5
          minimum: 1
          type: integer
        feedback:
          maxLength: 500
          type: string
    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
        reviewer:
          $ref: '#/components/schemas/User'
        skill:
          $ref: '#/components/schemas/Skill'
        rating:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
        feedback:
          maxLength: 500
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    SkillShareUpdateRequestDto:
      type: object
      properties:
        status:
          type: string
          enum:
            - PENDING
            - ACCEPTED
            - REJECTED
            - COMPLETED
    ErrorDetails:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: integer
        timestamp:
          type: number
          format: bigint